
/*
 * Lovely help functions
 */

@import "compass";

@mixin fullscreen {

  @include position(0,0,0,0);
  @include size(100%, 100%);

}

@mixin button($bkgColor: #26ae90) {

  display:block;
  padding: 6px 9px;
  margin: 0;

  text-decoration:none;
  font-size:1em;
  line-height: normal;

  color:#fff;
  background:$bkgColor;

  border:none;
  @include border-radius(2px);

  vertical-align: top;
  -webkit-appearance: none;
}

@mixin text-indent() {
  text-indent:-9999px;
  line-height:0px;
  font-size:0px;
  text-transform:uppercase;
}

@mixin user-select($val) {
  -webkit-touch-callout: $val;
  -webkit-user-select: $val;
  -khtml-user-select: $val;
  -moz-user-select: $val;
  -ms-user-select: $val;
  user-select: $val;
}

@mixin progress-background($rgba) {
  background-image: -webkit-linear-gradient(-45deg,$rgba 25%,transparent 25%,transparent 50%,$rgba 50%,$rgba 75%,transparent 75%,transparent);
  background-image: -moz-linear-gradient(-45deg,$rgba 25%,transparent 25%,transparent 50%,$rgba 50%,$rgba 75%,transparent 75%,transparent);
  background-image: -ms-linear-gradient(-45deg,$rgba 25%,transparent 25%,transparent 50%,$rgba 50%,$rgba 75%,transparent 75%,transparent);
  background-image: linear-gradient(-45deg,$rgba 25%,transparent 25%,transparent 50%,$rgba 50%,$rgba 75%,transparent 75%,transparent);
}

@mixin dark-glow($opacity) {
  -moz-box-shadow:0px 0px 6px 1px rgba(0, 0, 0, $opacity); /* Firefox v3.5+ */
  -webkit-box-shadow:0px 0px 6px 1px rgba(0,0,0, $opacity); /* Safari v3.0+ and by Chrome v0.2+ */
  box-shadow:0px 0px 6px 1px rgba(0,0,0, $opacity); /* Firefox v4.0+ , Safari v5.1+ , Chrome v10.0+  and by Opera v10.5+ */
  -ms-filter:"progid:DXImageTransform.Microsoft.Glow(Color = #33000000 ,Strength = $opacity * 10)";
  filter:progid:DXImageTransform.Microsoft.Glow(Color = #33000000 ,Strength = $opacity * 10);
}
@mixin glow($opacity) {
  -moz-box-shadow:0px 0px 6px 1px rgba(255, 255, 255, $opacity); /* Firefox v3.5+ */
  -webkit-box-shadow:0px 0px 6px 1px rgba(255, 255, 255, $opacity); /* Safari v3.0+ and by Chrome v0.2+ */
  box-shadow:0px 0px 6px 1px rgba(255, 255, 255, $opacity); /* Firefox v4.0+ , Safari v5.1+ , Chrome v10.0+  and by Opera v10.5+ */
  -ms-filter:"progid:DXImageTransform.Microsoft.Glow(Color = #33ffffff ,Strength = $opacity * 10)";
  filter:progid:DXImageTransform.Microsoft.Glow(Color = #33ffffff ,Strength = $opacity * 10);
}

@mixin size($width, $height:$width) {

  @if $width  != false { width:  $width; }
  @if $height != false { height: $height; }

}

@mixin position($top, $right, $bottom, $left) {

  position: absolute;

  @if $top    != false { top:    $top; }
  @if $right  != false { right:  $right; }
  @if $bottom != false { bottom: $bottom; }
  @if $left   != false { left:   $left; }

}

@mixin absolute-portrait-center($height) {
  position:absolute;
  top:50%;
  height: $height;
  margin-top: -1*$height/2;
}

@mixin absolute-landscape-center($width) {
  @include absolute-left-center($width);
}

@mixin absolute-left-center($width) {
  position:absolute;
  left:50%;
  width: $width;
  margin-left: -1*$width/2;
}

@mixin absolute-center($width, $height:$width) {

  position:absolute;
  left:50%;
  top: 50%;

  margin-left: -1*$width/2;
  margin-top:  -1*$height/2;

  @if $width  != false { width:  $width; }
  @if $height != false { height: $height; }

}

@mixin clearfix() {
  & { *zoom: 1; }
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
}

@mixin simple-transition($property, $duration: 250ms, $easing-method: ease-in) {

  @if not $easing-method { $easing-method: ease-in; }
  @if not $duration      { $duration: 250ms; }

  @include transition-property($property);
  @include transition-duration($duration);
  @include transition-timing-function($easing-method);

}

.shadow-transition {
  -webkit-transition: -webkit-box-shadow 0.3s ease-out;
  -moz-transition: -moz-box-shadow 0.3s ease-out;
  -o-transition: box-shadow 0.3s ease-out;
}

.no-glow {
  -moz-box-shadow: none;
  -webkit-box-shadow: none;
  box-shadow: none;
}

.disable-selection {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Media Queries in Sass 3.2
//
// These mixins make media queries a breeze with Sass.
// The media queries from mobile up until desktop all
// trigger at different points along the way
//
// And important point to remember is that and width
// over the portrait width is considered to be part of the
// landscape width. This allows us to capture widths of devices
// that might not fit the dimensions exactly. This means the break
// points are seamless.

$mq-mobile-portrait: 320px !default;
$mq-mobile-landscape  : 480px !default;
$mq-tablet-portrait   : 768px !default;
$mq-tablet-landscape  : 1024px !default;
$mq-desktop           : 1300px !default;

// Both portrait and landscape
@mixin mobile {
  @media (max-width : $mq-mobile-landscape){
    @content
  }
  }

// Everything up to and including the portrait width of the phone
// Since it's the smallest query it doesn't need a min
@mixin mobile-portrait {
  @media (max-width : $mq-mobile-portrait) {
    @content
  }
}

// Everything up to and including the mobile portrait
@mixin mobile-portrait-and-below {
  @media (max-width : $mq-mobile-portrait){
    @content
  }
}
// Everything above and including the mobile portrait
@mixin mobile-portrait-and-up {
  @media (min-width : $mq-mobile-portrait) {
    @content
  }
}

// Everthing larger than a portrait mobile up until mobile landscape
@mixin mobile-landscape {
  @media only screen and (min-width : $mq-mobile-portrait + 1) and (max-width : $mq-mobile-landscape) {
    @content
  }
}
// Everything up to and including the mobile landscape width
@mixin mobile-landscape-and-below {
  @media only screen and (max-width : $mq-mobile-landscape) {
    @content
  }
}
// Everything above and including the mobile landscape width
@mixin mobile-landscape-and-up {
  @media only screen and (min-width : $mq-mobile-portrait + 1) {
    @content
  }
}
// Both the portrait and landscape width of the tablet
// Larger than a landscape mobile but less than or equal to a landscape tablet
@mixin tablet {
  @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-landscape) {
    @content
  }
}
// Everything larger than mobile landscape up until the portrait width of the tablet
@mixin tablet-portrait {
  @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-portrait) {
    @content
  }
}
// Everything below and including the portrait width of the tablet
@mixin tablet-portrait-and-below {
  @media only screen and (max-width : $mq-tablet-portrait) {
    @content
  }
}
// Everything above and including the portrait width of the tablet
@mixin tablet-portrait-and-up {
  @media only screen and (min-width : $mq-mobile-landscape + 1) {
    @content
  }
}
// Larger than portrait but less than or equal to the landscape width
@mixin tablet-landscape {
  @media only screen and (min-width : $mq-tablet-portrait + 1) and (max-width : $mq-tablet-landscape) {
    @content
  }
}
// Up to and including the tablet landscape
@mixin tablet-landscape-and-below {
  @media only screen and (max-width : $mq-tablet-landscape) {
    @content
  }
}
// Everything larger than portrait tablet
@mixin tablet-landscape-and-up {
  @media only screen and (min-width : $mq-tablet-portrait + 1) {
    @content
  }
}
// Everything larger than a landscape tablet
@mixin desktop-and-up {
  @media only screen and (min-width : $mq-desktop + 1) {
    @content
  }
}
// Everything below and including the desktop
@mixin desktop-and-below {
  @media only screen and (max-width : $mq-desktop) {
    @content
  }
}
// Everything larger than a landscape tablet but less than or equal to the desktop
@mixin desktop {
  @media only screen and (min-width : $mq-tablet-landscape + 1) and (max-width : $mq-desktop) {
    @content
  }
}
// Retina screens have a 1.5 pixel ratio, not 2
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5) {
    @content
  }
}

